<html>
<head>
<meta name="viewport" content="width=device-width, initial-scale=1">
<link rel="stylesheet" href="http://www.w3schools.com/lib/w3.css">
<link rel="stylesheet" type="text/css" href="ProgramTable.css">
<link rel="stylesheet" type="text/css" href="ContentDesign.css">
</head>
<body>
     <h1 align="center"> BASIC INTRODUCTION </h1>
		<hr>
	 <h2 align="left">COMPUTER</h2>
	 <p>
   A computer is an electronic or digital machine which reads and stores data, procsses this data and gives the output. Thus a computer performs three basic 
   tasks : Input, Processing and Output.</p>
  <h2>Various units of a computer are as follows:</h2>
  <ul>
  <li> Input Unit </li>
  <li> Memory Unit </li>
  <li> Arithmetic and Logical Unit(ALU) </li>
  <li> Control Unit </li>
  <li> Output Unit </li>
  </ul>
  <h2>Programming Languages</h2>
<ul> 
  <li><i>Machine Language</i></li>
   Machine Language contains only two symbols- 0 & 1- which the computer can directly understand. Hence, initially instructions were coded in 0's
      and 1's and fed to the computer. Thus an instructor for addition would resemble something like 011010 for  a given computer but it was necessarily 
	  the ame pattern for some other computer.
	  The disadvantage is that it i machine specific i.e. a program written in machine Language.
	  The advantage is that it can be understood <b> directly </b> by the computer.
 
  <li><i>Assembly Language</i></li>
   Inorder to break away from the tedium of machine language Assembly Language was devised. Here, English like words called mnemonics are used for
       instructions. It is also machine specific.
	   For example: Mnemonic ADD would work for one computer but for other computer it could be AD.
 
   <li><i>High-Level Language</i></li>
  Inorder to overcome the drawbacks of machine and assembly language high-level language was invented. Instructiona and statements are English-like 
       and more user friendly. thus an expression like x = a + b is enough to add 'a' and 'b' and store the result in 'x'.
  	   
</ul> 
   <h2> Program/Software</h2>
<ul>
   <li><i>Program</i></li>
    A program is a sequence of instructions which accepts input, processes it and gives he desired output.
   <li><i>Software</i></li>
   A software is simply a set of programs.
   <li><i>Compiler</i></li>
   A compiler is itself a program which converts a program written in high level language to machine language for that particular hardware. Thus it can
       be considered as a language translator which translates a source code written in high-level language to object code which is a program in machine 
       language. A compiler  reads entire program at a time and then generates the object code if there are no syntax errors in source code.
   
   <li><i>Assembler</i></li>
   An assembler is itself a program which converts a program written in assembly language, to machine language for that particular hardware.
       IBM 360, assembler for 8085 microprocessor etc. are all examples of assemblers.
   <li><i>Linkers and Loaders</i></li>
   An object program in machine language generated by a language translator is not an executable or ready to run program. Some processing needs to
       be done on this code so that it becomes an eecutable or ready to run program. Some processing needs to be done on this object code so that
	   it becomes an executable program. This is the function of linker and loader. A linker combines the object program with other programs to prepare
	   a single program. This single program is the input to  the loader. The loader then loads the program to the main memory (RAM) and executes it     
   
</ul>
<div>

<a href="C-Problem Definition.php" target="iframe_content" style="float:right" class="button">NEXT</a>
</div>
	</body>
</html>
